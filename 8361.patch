From 0181847fe4a2736ea1b4266d2eff6dc5ef1307b5 Mon Sep 17 00:00:00 2001
From: Even Rouault <even.rouault@spatialys.com>
Date: Thu, 7 Sep 2023 17:35:21 +0200
Subject: [PATCH 1/2] Add support for PoDoFo >= 0.10.0 (fixes #8356)

---
 autotest/gdrivers/pdf.py                |   1 +
 cmake/modules/packages/FindPodofo.cmake |  11 +-
 frmts/pdf/CMakeLists.txt                |   4 +
 frmts/pdf/pdfdataset.cpp                |  95 ++++++++----
 frmts/pdf/pdfobject.cpp                 | 195 +++++++++++++++++++++---
 frmts/pdf/pdfobject.h                   |   8 +-
 frmts/pdf/pdfsdk_headers.h              |  18 +++
 7 files changed, 279 insertions(+), 53 deletions(-)

diff --git a/cmake/modules/packages/FindPodofo.cmake b/cmake/modules/packages/FindPodofo.cmake
index 5113ff56b8f0..fd66964621f2 100644
--- a/cmake/modules/packages/FindPodofo.cmake
+++ b/cmake/modules/packages/FindPodofo.cmake
@@ -51,7 +51,11 @@ find_library(PODOFO_LIBRARY
 mark_as_advanced(PODOFO_INCLUDE_DIR PODOFO_LIBRARY)
 
 if(PODOFO_INCLUDE_DIR)
-  set(version_hdr ${PODOFO_INCLUDE_DIR}/base/podofo_config.h)
+  set(version_hdr "${PODOFO_INCLUDE_DIR}/base/podofo_config.h")
+  if(NOT EXISTS ${version_hdr})
+    # PoDoFo >= 0.10
+    set(version_hdr "${PODOFO_INCLUDE_DIR}/auxiliary/podofo_config.h")
+  endif()
   if(EXISTS ${version_hdr})
     file(STRINGS ${version_hdr} _contents REGEX "^[ \t]*#define PODOFO_VERSION_.*")
     if(_contents)
@@ -70,12 +74,13 @@ find_package_handle_standard_args(Podofo
                                   VERSION_VAR PODOFO_VERSION_STRING)
 
 if(PODOFO_FOUND)
-  set(PODOFO_INCLUDE_DIRS "${PODOFO_INCLUDE_DIR}")
+  get_filename_component(PODOFO_PARENT_INCLUDE_DIR ${PODOFO_INCLUDE_DIR} DIRECTORY)
+  set(PODOFO_INCLUDE_DIRS "${PODOFO_INCLUDE_DIR};${PODOFO_PARENT_INCLUDE_DIR}")
   set(PODOFO_LIBRARIES "${PDOFO_LIBRARY}")
   if(NOT TARGET PODOFO::Podofo)
     add_library(PODOFO::Podofo UNKNOWN IMPORTED)
     set_target_properties(PODOFO::Podofo PROPERTIES
-                          INTERFACE_INCLUDE_DIRECTORIES "${PODOFO_INCLUDE_DIR}"
+                          INTERFACE_INCLUDE_DIRECTORIES "${PODOFO_INCLUDE_DIRS}"
                           IMPORTED_LINK_INTERFACE_LANGUAGES "C"
                           IMPORTED_LOCATION "${PODOFO_LIBRARY}")
   endif()
diff --git a/frmts/pdf/CMakeLists.txt b/frmts/pdf/CMakeLists.txt
index 6f4d8ae5642d..4c1776a215c5 100644
--- a/frmts/pdf/CMakeLists.txt
+++ b/frmts/pdf/CMakeLists.txt
@@ -35,6 +35,10 @@ if (GDAL_USE_POPPLER)
                                               -DPOPPLER_MINOR_VERSION=${Poppler_VERSION_MINOR})
 endif ()
 if (GDAL_USE_PODOFO)
+  if( "${PODOFO_VERSION_STRING}" VERSION_GREATER "0.10")
+    target_compile_features(gdal_PDF PRIVATE cxx_std_17)
+    target_compile_definitions(gdal_PDF PRIVATE -DHAVE_PODOFO_0_10_OR_LATER)
+  endif()
   target_compile_definitions(gdal_PDF PRIVATE -DHAVE_PODOFO)
   gdal_target_link_libraries(gdal_PDF PRIVATE PODOFO::Podofo)
 endif ()
diff --git a/frmts/pdf/pdfdataset.cpp b/frmts/pdf/pdfdataset.cpp
index 1f84aa2e01e2..396fd4ef8d04 100644
--- a/frmts/pdf/pdfdataset.cpp
+++ b/frmts/pdf/pdfdataset.cpp
@@ -4418,7 +4418,7 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
     Catalog *poCatalogPoppler = nullptr;
 #endif
 #ifdef HAVE_PODOFO
-    PoDoFo::PdfMemDocument *poDocPodofo = nullptr;
+    std::unique_ptr<PoDoFo::PdfMemDocument> poDocPodofo;
     PoDoFo::PdfPage *poPagePodofo = nullptr;
 #endif
 #ifdef HAVE_PDFIUM
@@ -4697,17 +4697,25 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
 #ifdef HAVE_PODOFO
     if (bUseLib.test(PDFLIB_PODOFO) && poPageObj == nullptr)
     {
+#if !(PODOFO_VERSION_MAJOR > 0 ||                                              \
+      (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10))
         PoDoFo::PdfError::EnableDebug(false);
         PoDoFo::PdfError::EnableLogging(false);
+#endif
 
-        poDocPodofo = new PoDoFo::PdfMemDocument();
+        poDocPodofo = cpl::make_unique<PoDoFo::PdfMemDocument>();
         try
         {
             poDocPodofo->Load(pszFilename);
         }
         catch (PoDoFo::PdfError &oError)
         {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+            if (oError.GetCode() == PoDoFo::PdfErrorCode::InvalidPassword)
+#else
             if (oError.GetError() == PoDoFo::ePdfError_InvalidPassword)
+#endif
             {
                 if (pszUserPwd)
                 {
@@ -4716,12 +4724,25 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
 
                     try
                     {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+                        poDocPodofo =
+                            cpl::make_unique<PoDoFo::PdfMemDocument>();
+                        poDocPodofo->Load(pszFilename, pszUserPwd);
+#else
                         poDocPodofo->SetPassword(pszUserPwd);
+#endif
                     }
                     catch (PoDoFo::PdfError &oError2)
                     {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+                        if (oError2.GetCode() ==
+                            PoDoFo::PdfErrorCode::InvalidPassword)
+#else
                         if (oError2.GetError() ==
                             PoDoFo::ePdfError_InvalidPassword)
+#endif
                         {
                             CPLError(CE_Failure, CPLE_AppDefined,
                                      "Invalid password");
@@ -4731,13 +4752,11 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
                             CPLError(CE_Failure, CPLE_AppDefined,
                                      "Invalid PDF : %s", oError2.what());
                         }
-                        delete poDocPodofo;
                         return nullptr;
                     }
                     catch (...)
                     {
                         CPLError(CE_Failure, CPLE_AppDefined, "Invalid PDF");
-                        delete poDocPodofo;
                         return nullptr;
                     }
                 }
@@ -4748,7 +4767,6 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
                              "the PDF_USER_PWD "
                              "configuration option / USER_PWD open option "
                              "(that can be set to ASK_INTERACTIVE)");
-                    delete poDocPodofo;
                     return nullptr;
                 }
             }
@@ -4756,56 +4774,70 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
             {
                 CPLError(CE_Failure, CPLE_AppDefined, "Invalid PDF : %s",
                          oError.what());
-                delete poDocPodofo;
                 return nullptr;
             }
         }
         catch (...)
         {
             CPLError(CE_Failure, CPLE_AppDefined, "Invalid PDF");
-            delete poDocPodofo;
             return nullptr;
         }
 
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+        auto &oPageCollections = poDocPodofo->GetPages();
+        nPages = static_cast<int>(oPageCollections.GetCount());
+#else
         nPages = poDocPodofo->GetPageCount();
+#endif
         if (iPage < 1 || iPage > nPages)
         {
             CPLError(CE_Failure, CPLE_AppDefined, "Invalid page number (%d/%d)",
                      iPage, nPages);
-            delete poDocPodofo;
             return nullptr;
         }
 
         try
         {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+            /* Sanity check to validate page count */
+            if (iPage != nPages)
+                CPL_IGNORE_RET_VAL(oPageCollections.GetPageAt(nPages - 1));
+
+            poPagePodofo = &oPageCollections.GetPageAt(iPage - 1);
+#else
             /* Sanity check to validate page count */
             if (iPage != nPages)
                 CPL_IGNORE_RET_VAL(poDocPodofo->GetPage(nPages - 1));
 
             poPagePodofo = poDocPodofo->GetPage(iPage - 1);
+#endif
         }
         catch (PoDoFo::PdfError &oError)
         {
             CPLError(CE_Failure, CPLE_AppDefined, "Invalid PDF : %s",
                      oError.what());
-            delete poDocPodofo;
             return nullptr;
         }
         catch (...)
         {
             CPLError(CE_Failure, CPLE_AppDefined, "Invalid PDF");
-            delete poDocPodofo;
             return nullptr;
         }
 
         if (poPagePodofo == nullptr)
         {
             CPLError(CE_Failure, CPLE_AppDefined, "Invalid PDF : invalid page");
-            delete poDocPodofo;
             return nullptr;
         }
 
-        PoDoFo::PdfObject *pObj = poPagePodofo->GetObject();
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+        const PoDoFo::PdfObject *pObj = &poPagePodofo->GetObject();
+#else
+        const PoDoFo::PdfObject *pObj = poPagePodofo->GetObject();
+#endif
         poPageObj = new GDALPDFObjectPodofo(pObj, poDocPodofo->GetObjects());
     }
 #endif  // ~ HAVE_PODOFO
@@ -4845,12 +4877,6 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
         if (bUseLib.test(PDFLIB_POPPLER))
             PDFFreeDoc(poDocPoppler);
 #endif
-#ifdef HAVE_PODOFO
-        if (bUseLib.test(PDFLIB_PODOFO))
-        {
-            delete poDocPodofo;
-        }
-#endif
 #ifdef HAVE_PDFIUM
         if (bUseLib.test(PDFLIB_PDFIUM))
         {
@@ -4895,7 +4921,7 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
     poDS->poDocPoppler = poDocPoppler;
 #endif
 #ifdef HAVE_PODOFO
-    poDS->poDocPodofo = poDocPodofo;
+    poDS->poDocPodofo = poDocPodofo.release();
 #endif
 #ifdef HAVE_PDFIUM
     poDS->poDocPdfium = poDocPdfium;
@@ -4951,11 +4977,17 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
     if (bUseLib.test(PDFLIB_PODOFO))
     {
         CPLAssert(poPagePodofo);
-        PoDoFo::PdfRect oMediaBox = poPagePodofo->GetMediaBox();
+        auto oMediaBox = poPagePodofo->GetMediaBox();
         dfX1 = oMediaBox.GetLeft();
         dfY1 = oMediaBox.GetBottom();
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+        dfX2 = dfX1 + oMediaBox.Width;
+        dfY2 = dfY1 + oMediaBox.Height;
+#else
         dfX2 = dfX1 + oMediaBox.GetWidth();
         dfY2 = dfY1 + oMediaBox.GetHeight();
+#endif
     }
 #endif
 
@@ -4994,7 +5026,12 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
     if (bUseLib.test(PDFLIB_PODOFO))
     {
         CPLAssert(poPagePodofo);
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+        dfRotation = poPagePodofo->GetRotationRaw();
+#else
         dfRotation = poPagePodofo->GetRotation();
+#endif
     }
 #endif
 
@@ -5364,10 +5401,10 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
 #ifdef HAVE_PODOFO
     if (bUseLib.test(PDFLIB_PODOFO))
     {
-        PoDoFo::TIVecObjects it = poDocPodofo->GetObjects().begin();
-        for (; it != poDocPodofo->GetObjects().end(); ++it)
+        for (const auto &obj : poDS->poDocPodofo->GetObjects())
         {
-            GDALPDFObjectPodofo oObjPodofo((*it), poDocPodofo->GetObjects());
+            GDALPDFObjectPodofo oObjPodofo(obj,
+                                           poDS->poDocPodofo->GetObjects());
             poDS->FindXMP(&oObjPodofo);
         }
 
@@ -5375,11 +5412,17 @@ PDFDataset *PDFDataset::Open(GDALOpenInfo *poOpenInfo)
         poDS->FindLayersGeneric(poPageDict);
 
         /* Read Info object */
-        PoDoFo::PdfInfo *poInfo = poDocPodofo->GetInfo();
+        const PoDoFo::PdfInfo *poInfo = poDS->poDocPodofo->GetInfo();
         if (poInfo != nullptr)
         {
-            GDALPDFObjectPodofo oInfoObjPodofo(poInfo->GetObject(),
-                                               poDocPodofo->GetObjects());
+            GDALPDFObjectPodofo oInfoObjPodofo(
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+                &(poInfo->GetObject()),
+#else
+                poInfo->GetObject(),
+#endif
+                poDS->poDocPodofo->GetObjects());
             poDS->ParseInfo(&oInfoObjPodofo);
         }
     }
diff --git a/frmts/pdf/pdfobject.cpp b/frmts/pdf/pdfobject.cpp
index e031fe5eb4c9..df4023bcf0ff 100644
--- a/frmts/pdf/pdfobject.cpp
+++ b/frmts/pdf/pdfobject.cpp
@@ -1579,13 +1579,13 @@ char *GDALPDFStreamPoppler::GetRawBytes()
 class GDALPDFDictionaryPodofo : public GDALPDFDictionary
 {
   private:
-    PoDoFo::PdfDictionary *m_poDict;
-    PoDoFo::PdfVecObjects &m_poObjects;
+    const PoDoFo::PdfDictionary *m_poDict;
+    const PoDoFo::PdfVecObjects &m_poObjects;
     std::map<CPLString, GDALPDFObject *> m_map;
 
   public:
-    GDALPDFDictionaryPodofo(PoDoFo::PdfDictionary *poDict,
-                            PoDoFo::PdfVecObjects &poObjects)
+    GDALPDFDictionaryPodofo(const PoDoFo::PdfDictionary *poDict,
+                            const PoDoFo::PdfVecObjects &poObjects)
         : m_poDict(poDict), m_poObjects(poObjects)
     {
     }
@@ -1604,13 +1604,13 @@ class GDALPDFDictionaryPodofo : public GDALPDFDictionary
 class GDALPDFArrayPodofo : public GDALPDFArray
 {
   private:
-    PoDoFo::PdfArray *m_poArray;
-    PoDoFo::PdfVecObjects &m_poObjects;
+    const PoDoFo::PdfArray *m_poArray;
+    const PoDoFo::PdfVecObjects &m_poObjects;
     std::vector<GDALPDFObject *> m_v;
 
   public:
-    GDALPDFArrayPodofo(PoDoFo::PdfArray *poArray,
-                       PoDoFo::PdfVecObjects &poObjects)
+    GDALPDFArrayPodofo(const PoDoFo::PdfArray *poArray,
+                       const PoDoFo::PdfVecObjects &poObjects)
         : m_poArray(poArray), m_poObjects(poObjects)
     {
     }
@@ -1629,10 +1629,23 @@ class GDALPDFArrayPodofo : public GDALPDFArray
 class GDALPDFStreamPodofo : public GDALPDFStream
 {
   private:
-    PoDoFo::PdfStream *m_pStream;
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+    const PoDoFo::PdfObjectStream *m_pStream;
+#else
+    const PoDoFo::PdfStream *m_pStream;
+#endif
 
   public:
-    GDALPDFStreamPodofo(PoDoFo::PdfStream *pStream) : m_pStream(pStream)
+    GDALPDFStreamPodofo(
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+        const PoDoFo::PdfObjectStream *
+#else
+        const PoDoFo::PdfStream *
+#endif
+            pStream)
+        : m_pStream(pStream)
     {
     }
     virtual ~GDALPDFStreamPodofo()
@@ -1656,13 +1669,23 @@ class GDALPDFStreamPodofo : public GDALPDFStream
 /*                          GDALPDFObjectPodofo()                       */
 /************************************************************************/
 
-GDALPDFObjectPodofo::GDALPDFObjectPodofo(PoDoFo::PdfObject *po,
-                                         PoDoFo::PdfVecObjects &poObjects)
+GDALPDFObjectPodofo::GDALPDFObjectPodofo(const PoDoFo::PdfObject *po,
+                                         const PoDoFo::PdfVecObjects &poObjects)
     : m_po(po), m_poObjects(poObjects), m_poDict(nullptr), m_poArray(nullptr),
       m_poStream(nullptr)
 {
     try
     {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+        if (m_po->GetDataType() == PoDoFo::PdfDataType::Reference)
+        {
+            PoDoFo::PdfObject *poObj =
+                m_poObjects.GetObject(m_po->GetReference());
+            if (poObj)
+                m_po = poObj;
+        }
+#else
         if (m_po->GetDataType() == PoDoFo::ePdfDataType_Reference)
         {
             PoDoFo::PdfObject *poObj =
@@ -1670,6 +1693,7 @@ GDALPDFObjectPodofo::GDALPDFObjectPodofo(PoDoFo::PdfObject *po,
             if (poObj)
                 m_po = poObj;
         }
+#endif
     }
     catch (PoDoFo::PdfError &oError)
     {
@@ -1699,6 +1723,27 @@ GDALPDFObjectType GDALPDFObjectPodofo::GetType()
     {
         switch (m_po->GetDataType())
         {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+            case PoDoFo::PdfDataType::Null:
+                return PDFObjectType_Null;
+            case PoDoFo::PdfDataType::Bool:
+                return PDFObjectType_Bool;
+            case PoDoFo::PdfDataType::Number:
+                return PDFObjectType_Int;
+            case PoDoFo::PdfDataType::Real:
+                return PDFObjectType_Real;
+            case PoDoFo::PdfDataType::String:
+                return PDFObjectType_String;
+            case PoDoFo::PdfDataType::Name:
+                return PDFObjectType_Name;
+            case PoDoFo::PdfDataType::Array:
+                return PDFObjectType_Array;
+            case PoDoFo::PdfDataType::Dictionary:
+                return PDFObjectType_Dictionary;
+            default:
+                return PDFObjectType_Unknown;
+#else
             case PoDoFo::ePdfDataType_Null:
                 return PDFObjectType_Null;
             case PoDoFo::ePdfDataType_Bool:
@@ -1719,6 +1764,7 @@ GDALPDFObjectType GDALPDFObjectPodofo::GetType()
                 return PDFObjectType_Dictionary;
             default:
                 return PDFObjectType_Unknown;
+#endif
         }
     }
     catch (PoDoFo::PdfError &oError)
@@ -1753,7 +1799,12 @@ const char *GDALPDFObjectPodofo::GetTypeNameNative()
 
 int GDALPDFObjectPodofo::GetBool()
 {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+    if (m_po->GetDataType() == PoDoFo::PdfDataType::Bool)
+#else
     if (m_po->GetDataType() == PoDoFo::ePdfDataType_Bool)
+#endif
         return m_po->GetBool();
     else
         return 0;
@@ -1765,7 +1816,12 @@ int GDALPDFObjectPodofo::GetBool()
 
 int GDALPDFObjectPodofo::GetInt()
 {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+    if (m_po->GetDataType() == PoDoFo::PdfDataType::Number)
+#else
     if (m_po->GetDataType() == PoDoFo::ePdfDataType_Number)
+#endif
         return static_cast<int>(m_po->GetNumber());
     else
         return 0;
@@ -1790,7 +1846,12 @@ double GDALPDFObjectPodofo::GetReal()
 const CPLString &GDALPDFObjectPodofo::GetString()
 {
     if (GetType() == PDFObjectType_String)
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+        return (osStr = m_po->GetString().GetString());
+#else
         return (osStr = m_po->GetString().GetStringUtf8());
+#endif
     else
         return (osStr = "");
 }
@@ -1802,7 +1863,12 @@ const CPLString &GDALPDFObjectPodofo::GetString()
 const CPLString &GDALPDFObjectPodofo::GetName()
 {
     if (GetType() == PDFObjectType_Name)
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+        return (osStr = m_po->GetName().GetString());
+#else
         return (osStr = m_po->GetName().GetName());
+#endif
     else
         return (osStr = "");
 }
@@ -1873,7 +1939,12 @@ GDALPDFStream *GDALPDFObjectPodofo::GetStream()
 
 GDALPDFObjectNum GDALPDFObjectPodofo::GetRefNum()
 {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+    return GDALPDFObjectNum(m_po->GetIndirectReference().ObjectNumber());
+#else
     return GDALPDFObjectNum(m_po->Reference().ObjectNumber());
+#endif
 }
 
 /************************************************************************/
@@ -1882,7 +1953,12 @@ GDALPDFObjectNum GDALPDFObjectPodofo::GetRefNum()
 
 int GDALPDFObjectPodofo::GetRefGen()
 {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+    return m_po->GetIndirectReference().GenerationNumber();
+#else
     return m_po->Reference().GenerationNumber();
+#endif
 }
 
 /************************************************************************/
@@ -1913,7 +1989,7 @@ GDALPDFObject *GDALPDFDictionaryPodofo::Get(const char *pszKey)
     if (oIter != m_map.end())
         return oIter->second;
 
-    PoDoFo::PdfObject *poVal = m_poDict->GetKey(PoDoFo::PdfName(pszKey));
+    const PoDoFo::PdfObject *poVal = m_poDict->GetKey(PoDoFo::PdfName(pszKey));
     if (poVal)
     {
         GDALPDFObjectPodofo *poObj =
@@ -1933,14 +2009,18 @@ GDALPDFObject *GDALPDFDictionaryPodofo::Get(const char *pszKey)
 
 std::map<CPLString, GDALPDFObject *> &GDALPDFDictionaryPodofo::GetValues()
 {
-    PoDoFo::TKeyMap::iterator oIter = m_poDict->GetKeys().begin();
-    PoDoFo::TKeyMap::iterator oEnd = m_poDict->GetKeys().end();
-    for (; oIter != oEnd; ++oIter)
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+    for (const auto &oIter : *m_poDict)
     {
-        const char *pszKey = oIter->first.GetName().c_str();
-        Get(pszKey);
+        Get(oIter.first.GetString().c_str());
     }
-
+#else
+    for (const auto &oIter : m_poDict->GetKeys())
+    {
+        Get(oIter.first.GetName().c_str());
+    }
+#endif
     return m_map;
 }
 
@@ -1989,7 +2069,7 @@ GDALPDFObject *GDALPDFArrayPodofo::Get(int nIndex)
     if (m_v[nIndex] != nullptr)
         return m_v[nIndex];
 
-    PoDoFo::PdfObject &oVal = (*m_poArray)[nIndex];
+    const PoDoFo::PdfObject &oVal = (*m_poArray)[nIndex];
     GDALPDFObjectPodofo *poObj = new GDALPDFObjectPodofo(&oVal, m_poObjects);
     m_v[nIndex] = poObj;
     return poObj;
@@ -2007,6 +2087,21 @@ GDALPDFObject *GDALPDFArrayPodofo::Get(int nIndex)
 
 int GDALPDFStreamPodofo::GetLength()
 {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+    PoDoFo::charbuff str;
+    try
+    {
+        m_pStream->CopyToSafe(str);
+    }
+    catch (PoDoFo::PdfError &e)
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "CopyToSafe() failed: %s",
+                 e.what());
+        return 0;
+    }
+    return static_cast<int64_t>(str.size());
+#else
     char *pBuffer = nullptr;
     PoDoFo::pdf_long nLen = 0;
     try
@@ -2019,6 +2114,7 @@ int GDALPDFStreamPodofo::GetLength()
     {
     }
     return 0;
+#endif
 }
 
 /************************************************************************/
@@ -2027,6 +2123,28 @@ int GDALPDFStreamPodofo::GetLength()
 
 char *GDALPDFStreamPodofo::GetBytes()
 {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+    PoDoFo::charbuff str;
+    try
+    {
+        m_pStream->CopyToSafe(str);
+    }
+    catch (PoDoFo::PdfError &e)
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "CopyToSafe() failed: %s",
+                 e.what());
+        return nullptr;
+    }
+    char *pszContent = (char *)VSI_MALLOC_VERBOSE(str.size() + 1);
+    if (!pszContent)
+    {
+        return nullptr;
+    }
+    memcpy(pszContent, str.data(), str.size());
+    pszContent[str.size()] = '\0';
+    return pszContent;
+#else
     char *pBuffer = nullptr;
     PoDoFo::pdf_long nLen = 0;
     try
@@ -2047,6 +2165,7 @@ char *GDALPDFStreamPodofo::GetBytes()
     PoDoFo::podofo_free(pBuffer);
     pszContent[nLen] = '\0';
     return pszContent;
+#endif
 }
 
 /************************************************************************/
@@ -2072,6 +2191,41 @@ int GDALPDFStreamPodofo::GetRawLength()
 
 char *GDALPDFStreamPodofo::GetRawBytes()
 {
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+    PoDoFo::charbuff str;
+    try
+    {
+        PoDoFo::StringStreamDevice stream(str);
+#ifdef USE_HACK_BECAUSE_PdfInputStream_constructor_is_not_exported_in_podofo_0_11
+        auto *poNonConstStream =
+            const_cast<PoDoFo::PdfObjectStream *>(m_pStream);
+        auto inputStream = poNonConstStream->GetProvider().GetInputStream(
+            poNonConstStream->GetParent());
+        inputStream->CopyTo(stream);
+#else
+        // Should work but fails to link because PdfInputStream destructor
+        // is not exported
+        auto inputStream = m_pStream->GetInputStream(/*raw=*/true);
+        inputStream.CopyTo(stream);
+#endif
+        stream.Flush();
+    }
+    catch (PoDoFo::PdfError &e)
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "CopyToSafe() failed: %s",
+                 e.what());
+        return nullptr;
+    }
+    char *pszContent = (char *)VSI_MALLOC_VERBOSE(str.size() + 1);
+    if (!pszContent)
+    {
+        return nullptr;
+    }
+    memcpy(pszContent, str.data(), str.size());
+    pszContent[str.size()] = '\0';
+    return pszContent;
+#else
     char *pBuffer = nullptr;
     PoDoFo::pdf_long nLen = 0;
     try
@@ -2092,6 +2246,7 @@ char *GDALPDFStreamPodofo::GetRawBytes()
     PoDoFo::podofo_free(pBuffer);
     pszContent[nLen] = '\0';
     return pszContent;
+#endif
 }
 
 #endif  // HAVE_PODOFO
diff --git a/frmts/pdf/pdfobject.h b/frmts/pdf/pdfobject.h
index 1f49fea88800..d14fd05f05f6 100644
--- a/frmts/pdf/pdfobject.h
+++ b/frmts/pdf/pdfobject.h
@@ -391,8 +391,8 @@ GDALPDFArray *GDALPDFCreateArray(Array *array);
 class GDALPDFObjectPodofo : public GDALPDFObject
 {
   private:
-    PoDoFo::PdfObject *m_po;
-    PoDoFo::PdfVecObjects &m_poObjects;
+    const PoDoFo::PdfObject *m_po;
+    const PoDoFo::PdfVecObjects &m_poObjects;
     GDALPDFDictionary *m_poDict;
     GDALPDFArray *m_poArray;
     GDALPDFStream *m_poStream;
@@ -402,8 +402,8 @@ class GDALPDFObjectPodofo : public GDALPDFObject
     virtual const char *GetTypeNameNative() override;
 
   public:
-    GDALPDFObjectPodofo(PoDoFo::PdfObject *po,
-                        PoDoFo::PdfVecObjects &poObjects);
+    GDALPDFObjectPodofo(const PoDoFo::PdfObject *po,
+                        const PoDoFo::PdfVecObjects &poObjects);
 
     virtual ~GDALPDFObjectPodofo();
 
diff --git a/frmts/pdf/pdfsdk_headers.h b/frmts/pdf/pdfsdk_headers.h
index f2c830c64def..736d1f64574e 100644
--- a/frmts/pdf/pdfsdk_headers.h
+++ b/frmts/pdf/pdfsdk_headers.h
@@ -108,7 +108,25 @@ typedef unsigned char Guchar;
 #undef GetObject
 #endif
 
+// Related fix submitted per https://github.com/podofo/podofo/pull/98
+#ifdef HAVE_PODOFO_0_10_OR_LATER
+#define USE_HACK_BECAUSE_PdfInputStream_constructor_is_not_exported_in_podofo_0_11
+#endif
+
+#ifdef USE_HACK_BECAUSE_PdfInputStream_constructor_is_not_exported_in_podofo_0_11
+// Ugly! PfdObjectStream::GetParent() is private but we need it...
+#define private public
+#endif
 #include "podofo.h"
+#ifdef private
+#undef private
+#endif
+
+#if PODOFO_VERSION_MAJOR > 0 ||                                                \
+    (PODOFO_VERSION_MAJOR == 0 && PODOFO_VERSION_MINOR >= 10)
+#define PdfVecObjects PdfIndirectObjectList
+#endif
+
 #endif  // HAVE_PODOFO
 
 #ifdef HAVE_PDFIUM

